import { GridRowModel, GridFilterModel, GridSortModel, GridColDef, GridRowId, GridPaginationModel, GridValidRowModel, GridAggregationModel } from '@mui/x-data-grid-premium';
export interface FakeServerResponse {
  returnedRows: GridRowModel[];
  aggregateRow?: GridValidRowModel;
  nextCursor?: string;
  hasNextPage?: boolean;
  totalRowCount: number;
}
export interface PageInfo {
  totalRowCount?: number;
  nextCursor?: string;
  hasNextPage?: boolean;
  pageSize?: number;
}
export interface DefaultServerOptions {
  minDelay: number;
  maxDelay: number;
  useCursorPagination?: boolean;
}
export type ServerOptions = Partial<DefaultServerOptions>;
export interface QueryOptions {
  cursor?: GridRowId;
  page?: number;
  pageSize?: number;
  filterModel?: GridFilterModel;
  aggregationModel?: GridAggregationModel;
  sortModel?: GridSortModel;
  start?: number;
  end?: number;
}
export interface ServerSideQueryOptions {
  cursor?: GridRowId;
  paginationModel?: GridPaginationModel;
  groupKeys?: string[];
  filterModel?: GridFilterModel;
  sortModel?: GridSortModel;
  aggregationModel?: GridAggregationModel;
  start?: number;
  end?: number;
  groupFields?: string[];
}
export declare const disableDelay: any;
export declare const DEFAULT_SERVER_OPTIONS: DefaultServerOptions;
/**
 * Simulates server data loading
 */
export declare const loadServerRows: (rows: GridRowModel[], queryOptions: QueryOptions, serverOptions: ServerOptions, columnsWithDefaultColDef: GridColDef[]) => Promise<FakeServerResponse>;
interface NestedDataRowsResponse {
  rows: GridRowModel[];
  rootRowCount: number;
  aggregateRow?: GridRowModel;
}
/**
 * Simulates server data for tree-data feature
 */
export declare const processTreeDataRows: (rows: GridRowModel[], queryOptions: ServerSideQueryOptions, serverOptions: ServerOptions, columnsWithDefaultColDef: GridColDef[]) => Promise<NestedDataRowsResponse>;
/**
 * Simulates server data for row grouping feature
 */
export declare const processRowGroupingRows: (rows: GridValidRowModel[], queryOptions: ServerSideQueryOptions, serverOptions: ServerOptions, columnsWithDefaultColDef: GridColDef[]) => Promise<NestedDataRowsResponse>;
export {};